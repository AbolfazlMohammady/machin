import numpy as np  # "وارد کردن کتابخانه نامپای برای کار با داده‌های عددی و ماتریس‌ها"

# "ایجاد یک آرایه دو بعدی که یک ماتریس ۲ در ۲ است"
a = np.array([
    [1, 2],
    [3, 4],
])  
"""
| 1  2 |
| 3  4 |
این نوع آرایه در یادگیری ماشین، پردازش تصویر و تحلیل داده‌ها استفاده می‌شود.
"""

# "ایجاد یک ماتریس با روش ماتریس نامپای"
b = np.matrix([
    [1, 2],
    [3, 4]
])  
"""
| 1  2 |
| 3  4 |
تفاوت این نوع داده با آرایه در این است که اعمال ریاضی مستقیماً روی ماتریس انجام می‌شود.
"""

# "انجام ضرب ماتریسی با استفاده از علامت @"
c = a @ a  
"""
حاصل ضرب دو ماتریس برابر است با:
| (1×1 + 2×3)  (1×2 + 2×4) |
| (3×1 + 4×3)  (3×2 + 4×4) |
|  7   10  |
|  15  22  |
این نوع ضرب در شبکه‌های عصبی و پردازش تصویر کاربرد دارد.
"""

# "انجام ضرب ماتریسی با استفاده از تابع مخصوص"
d = np.dot(a, a)  
"""
همان عملیات بالا با روش دیگر محاسبه می‌شود، که در تحلیل داده‌ها و یادگیری ماشین استفاده دارد.
"""

# "ضرب هر درایه در درایه‌ی متناظر خودش"
e = np.multiply(a, a)  
"""
| 1×1  2×2 |
| 3×3  4×4 |
| 1  4 |
| 9 16 |
این روش در پردازش تصویر و تحلیل داده‌های عددی استفاده می‌شود.
"""

# "حاصل‌ضرب تمام عناصر ماتریس"
f = np.prod(a)  
"""
1×2×3×4 = 24
این عملیات در محاسبات آماری و احتمال به کار می‌رود.
"""

# "ضرب هر عنصر در عنصر متناظر خودش"
g = a * a  
"""
مشابه روش قبل، برای اعمال عملیات روی کل آرایه به کار می‌رود.
"""

# "ضرب ماتریسی در صورتی که داده از نوع ماتریس باشد"
h = b * b  
"""
در اینجا * به جای ضرب عنصر به عنصر، ضرب ماتریسی انجام می‌دهد، همانند عملیات بالا.
این روش در حل معادلات و تحلیل‌های ریاضی استفاده می‌شود.
"""

# "نمایش نتیجه‌ی ضرب ماتریسی b در خودش"
print(h)  
"""
خروجی:
[[ 7 10 ]
 [15 22 ]]
نتایج محاسباتی که در علوم داده و یادگیری ماشین بسیار مفید هستند.
"""