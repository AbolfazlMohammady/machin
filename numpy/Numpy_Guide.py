import numpy as np
# print(np.__version__)  # نمایش نسخه نصب شده NumPy

"""
1. ایجاد آرایه‌ها (Array)
این بخش نحوه ایجاد آرایه‌های یک‌بعدی، دو‌بعدی و سه‌بعدی را نشان می‌دهد.
"""

# 1.1 آرایه یک‌بعدی
"""
در اینجا یک آرایه یک‌بعدی شامل اعداد 1 تا 5 ساخته می‌شود.
آرایه‌های یک‌بعدی می‌توانند برای ذخیره لیست‌های ساده استفاده شوند.
"""
arr = np.array([1, 2, 3, 4, 5])
# print(arr)  # نمایش آرایه یک‌بعدی

# 1.2 آرایه دو‌بعدی (ماتریس)
"""
در اینجا یک آرایه دو‌بعدی (ماتریس) با دو ردیف و سه ستون ساخته می‌شود.
آرایه‌های دو‌بعدی می‌توانند برای ذخیره داده‌های جدول مانند ماتریس‌ها استفاده شوند.
"""
arr_2d = np.array([[1, 2, 3], [4, 5, 6]])
# print(arr_2d)  # نمایش آرایه دو‌بعدی

# 1.3 آرایه سه‌بعدی
"""
در اینجا یک آرایه سه‌بعدی ساخته می‌شود که می‌تواند به عنوان مجموعه‌ای از ماتریس‌ها در نظر گرفته شود.
آرایه‌های سه‌بعدی برای ذخیره داده‌های پیچیده‌تری که به ابعاد بیشتری نیاز دارند مفید هستند.
"""
arr_3d = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])
# print(arr_3d)  # نمایش آرایه سه‌بعدی

"""
2. ویژگی‌های آرایه‌ها
در این بخش، ویژگی‌های مختلف یک آرایه مانند شکل (shape)، تعداد ابعاد (ndim)، اندازه (size) و نوع داده (dtype) بررسی می‌شود.
"""

# 2.1 شکل (Shape)
"""
ویژگی shape ابعاد آرایه (تعداد ردیف‌ها و ستون‌ها در آرایه‌های دو‌بعدی) را برمی‌گرداند.
برای مثال، برای یک آرایه 2x3 خروجی (2, 3) خواهد بود.
"""
# print(arr_2d.shape)  # خروجی: (2, 3) یعنی 2 ردیف و 3 ستون

# 2.2 تعداد ابعاد (ndim)
"""
ویژگی ndim تعداد ابعاد آرایه را مشخص می‌کند.
یک آرایه یک‌بعدی دارای یک بعد، و یک آرایه دو‌بعدی دارای دو بعد خواهد بود.
"""
# print(arr.ndim)    # برای آرایه یک‌بعدی خروجی: 1
# print(arr_2d.ndim) # برای آرایه دو‌بعدی خروجی: 2

# 2.3 اندازه (Size)
"""
ویژگی size تعداد کل عناصر موجود در آرایه را برمی‌گرداند.
برای مثال، برای یک آرایه 2x3 خروجی 6 خواهد بود.
"""
# print(arr_2d.size)  # خروجی: 6 (چون 2x3 = 6 عنصر)

# 2.4 نوع داده (dtype)
"""
ویژگی dtype نوع داده‌ای که در آرایه ذخیره شده را مشخص می‌کند.
برای مثال، برای آرایه‌هایی که شامل اعداد صحیح هستند، خروجی معمولاً int64 یا int32 است.
"""
# print(arr.dtype)  # خروجی معمولاً int64 یا int32 بسته به سیستم شما

"""
3. ساخت آرایه‌های خاص
در این بخش آرایه‌های خاصی مثل آرایه‌ای پر از صفر، یک، آرایه تصادفی و آرایه‌های عددهای متوالی ساخته می‌شود.
"""

# 3.1 آرایه‌ای پر از صفر
"""
np.zeros یک آرایه با ابعاد مشخص را پر از صفر می‌سازد.
این می‌تواند برای شروع با آرایه‌هایی که نیاز به مقادیر ابتدایی صفر دارند مفید باشد.
"""
zeros = np.zeros((3, 3))
# print(zeros)  # نمایش آرایه 3x3 پر از صفر

# 3.2 آرایه‌ای پر از یک
"""
np.ones یک آرایه با ابعاد مشخص را پر از یک می‌سازد.
این برای آرایه‌هایی که باید با مقدار یک آغاز شوند کاربرد دارد.
"""
ones = np.ones((2, 4))
# print(ones)  # نمایش آرایه 2x4 پر از یک

# 3.3 آرایه تصادفی
"""
np.random.rand آرایه‌ای با اعداد تصادفی از توزیع یکنواخت در بازه [0,1) ایجاد می‌کند.
این برای داده‌های تصادفی یا شبیه‌سازی استفاده می‌شود.
"""
rand = np.random.rand(3, 3)
# print(rand)  # نمایش آرایه 3x3 با اعداد تصادفی

# 3.4 آرایه عددهای متوالی
"""
np.arange آرایه‌ای از اعداد با شروع، توقف و فاصله مشخص ایجاد می‌کند.
این مشابه توابع range است که در پایتون برای ایجاد لیست‌های عددی استفاده می‌شود.
"""
arange = np.arange(1, 10, 2)
# print(arange)  # خروجی: [1 3 5 7 9]

"""
4. عملیات ریاضی روی آرایه‌ها
در این بخش عملیات ریاضی پایه‌ای مانند جمع، تفریق، ضرب و تقسیم دو آرایه، همچنین محاسبات آماری مانند مجموع، مینیمم، ماکزیمم و میانگین انجام می‌شود.
"""

# 4.1 جمع، تفریق، ضرب و تقسیم
"""
این بخش نشان می‌دهد که چگونه می‌توان روی آرایه‌ها عملیات ریاضی مختلف انجام داد.
برای مثال، جمع دو آرایه به این صورت است که المان‌های هم‌مکان آن‌ها جمع می‌شوند.
"""
a = np.array([1, 2, 3])
b = np.array([4, 5, 6])
# print(a + b)  # جمع المان به المان آرایه‌ها
# print(a - b)  # تفریق المان به المان آرایه‌ها
# print(a * b)  # ضرب المان به المان آرایه‌ها
# print(a / b)  # تقسیم المان به المان آرایه‌ها

# 4.2 محاسبات آماری
"""
این بخش برای انجام محاسبات آماری مثل مجموع، کمترین مقدار، بیشترین مقدار و میانگین روی آرایه‌ها مفید است.
"""
arr = np.array([10, 20, 30, 40])
# print(np.sum(arr))   # محاسبه مجموع عناصر آرایه
# print(np.min(arr))   # یافتن کمترین مقدار در آرایه
# print(np.max(arr))   # یافتن بیشترین مقدار در آرایه
# print(np.mean(arr))  # محاسبه میانگین عناصر آرایه

"""
5. ماتریس‌ها و جبر خطی
در این بخش عملیات جبر خطی شامل ضرب ماتریسی، ترانهاده، محاسبه دترمینان و معکوس یک ماتریس نشان داده می‌شود.
"""

# 5.1 ضرب ماتریسی
"""
np.dot برای ضرب ماتریسی دو آرایه استفاده می‌شود.
این عملیات در جبر خطی کاربرد دارد و برای ضرب دو ماتریس مناسب است.
"""
A = np.array([[1, 2], [3, 4]])
B = np.array([[5, 6], [7, 8]])
result = np.dot(A, B)
# print(result)  # نمایش نتیجه ضرب ماتریسی A و B

# 5.2 ترانهاده (Transpose)
"""
A.T آرایه A را ترانهاده می‌کند (ردیف‌ها و ستون‌ها را عوض می‌کند).
این کار در جبر خطی برای تغییر ابعاد ماتریس‌ها استفاده می‌شود.
"""
# print(A.T)

# 5.3 دترمینان ماتریس
"""
از np.linalg.det برای محاسبه دترمینان ماتریس استفاده می‌شود.
دترمینان برای حل سیستم‌های معادلات خطی و تحلیل ماتریس‌ها مهم است.
"""
from numpy.linalg import det
# print(det(A))  # نمایش دترمینان ماتریس A

# 5.4 معکوس ماتریس
"""
از np.linalg.inv برای محاسبه معکوس ماتریس استفاده می‌شود.
معکوس ماتریس در حل معادلات خطی کاربرد دارد.
"""
from numpy.linalg import inv
# print(inv(A))  # نمایش معکوس ماتریس A

"""
6. چرا NumPy در یادگیری ماشین مهم است؟
این بخش توضیح می‌دهد که چرا NumPy ابزار مهمی در پردازش داده‌ها و محاسبات ریاضی پیچیده، به ویژه در زمینه یادگیری ماشین محسوب می‌شود.
✅ پردازش داده‌ها را سریع‌تر و بهینه‌تر می‌کند.
✅ بسیاری از کتابخانه‌های یادگیری ماشین (مثل TensorFlow و Scikit-Learn) از NumPy استفاده می‌کنند.
✅ انجام محاسبات ریاضی پیچیده مانند جبر خطی، آمار و احتمالات را ساده می‌کند.
"""

# در نهایت، این کد شامل تمامی مفاهیم پایه‌ای NumPy است. شما می‌توانید 
# هر بخش را به صورت جداگانه تست کنید و در صورت نیاز دستورات print را از کامنت خارج کنید.
