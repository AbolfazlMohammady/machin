import numpy as np  # "وارد کردن کتابخانه نامپای برای انجام محاسبات عددی"

# "ایجاد یک آرایه یک‌بعدی شامل اعداد ۱، ۲ و ۳"
a = np.array([1, 2, 3])  

# "اضافه کردن مقدار ۵ به تمام عناصر آرایه a با استفاده از بردکستینگ"
b = a + 5  
"""
عملیات فوق باعث می‌شود مقدار ۵ به تک‌تک عناصر آرایه a اضافه شود.
نتیجه:
[1+5, 2+5, 3+5] = [6, 7, 8]
بردکستینگ در اینجا باعث شده مقدار ۵ به عنوان یک آرایه با اندازه مشابه در نظر گرفته شود.
"""

# "ایجاد یک ماتریس ۳×۳ شامل اعداد ۱"
c = np.ones((3, 3))  

# "ایجاد یک آرایه یک‌بعدی دیگر با اعداد ۱، ۲ و ۳"
d = np.array([1, 2, 3])  

# "جمع آرایه یک‌بعدی d با ماتریس c با استفاده از بردکستینگ"
e = d + c  
"""
بردکستینگ باعث می‌شود آرایه d در تمامی سطرهای ماتریس c کپی شده و سپس عملیات جمع انجام شود:
| 1+1  2+1  3+1 |
| 1+2  2+2  3+2 |
| 1+3  2+3  3+3 |
نتیجه:
[[2. 3. 4.]
 [2. 3. 4.]
 [2. 3. 4.]]
"""

# "ایجاد یک ماتریس ۳×۱ شامل مقدار ۱"
g = np.ones((3, 1))  

# "ایجاد یک آرایه یک‌بعدی شامل ۵، ۶ و ۷"
h = np.array([5, 6, 7])  

# "جمع آرایه h با ماتریس g با استفاده از بردکستینگ"
i = g + h  
"""
بردکستینگ باعث می‌شود که آرایه h به گونه‌ای گسترش یابد که بتواند با g جمع شود.
در اینجا h به عنوان یک آرایه افقی در نظر گرفته شده و عملیات جمع انجام می‌شود:
| 1+5  1+6  1+7 |
| 1+5  1+6  1+7 |
| 1+5  1+6  1+7 |
نتیجه:
[[6. 7. 8.]
 [6. 7. 8.]
 [6. 7. 8.]]

بردکستینگ در نامپای یکی از مفاهیم قدرتمند است که به ما اجازه می‌دهد عملیات محاسباتی را بدون نیاز به تکرار غیرضروری انجام دهیم.
"""
